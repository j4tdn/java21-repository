-- 01.sql --> Liên quan đến ITEM
-- T01_ITEM, T02_ITEMGROUP, T06_SIZE, T12_ITEM_DETAIL, T13_GALLERY

 -- USE java21_shopping; -- set database java21_shopping as default

-- disable foreign key check
SET FOREIGN_KEY_CHECKS = 0;

DROP TABLE IF EXISTS T02_ITEM_GROUP;
CREATE TABLE T02_ITEM_GROUP(
	C02_ITEM_GROUP_ID INT PRIMARY KEY,
    C02_ITEM_GROUP_NAME VARCHAR(255) NOT NULL,
    -- nên có constraint name để sau có cập nhật, xóa constraint
    -- sử dụng name đã khai báo thay vì name mặc định
    CONSTRAINT UNQ_ITEM_GROUP_NAME UNIQUE(C02_ITEM_GROUP_NAME)
);

DROP TABLE IF EXISTS T01_ITEM;
CREATE TABLE T01_ITEM(
	C01_ITEM_ID INT,
	C01_ITEM_NAME VARCHAR(255) NOT NULL,
	C01_BUY_PRICE FLOAT NOT NULL,
	C01_ITEM_GROUP_ID INT NOT NULL,
    -- không cần khai báo constrain name cho khóa chính
    -- vì 1 table chỉ có duy nhất 1 khóa chính và luôn lấy name = PRIMARY_KEY
    -- chỉ dùng cách này khi bảng có khóa chính(chứa nhiều hơn 1 COLUMN)
    PRIMARY KEY (C01_ITEM_ID),
    -- mặc định ON DELETE(NO ACTION = RESTRICT), ON UPDATE(NO ACTION = RESTRICT)
    -- khi xóa dòng dữ liệu ở bảng cha(bảng 1) nếu dữ liệu đó đang được sử dụng
    -- ở bảng con --> báo lỗi
    CONSTRAINT FK_ITEM_ITEM_GROUP FOREIGN KEY (C01_ITEM_GROUP_ID)
                                  REFERENCES  T02_ITEM_GROUP(C02_ITEM_GROUP_ID),
	CONSTRAINT UNQ_ITEM_NAME UNIQUE(C01_ITEM_NAME),
    CONSTRAINT CHECK_BUY_PRICE_POSITIVE CHECK (C01_BUY_PRICE >= 0)
);

DROP TABLE IF EXISTS T06_SIZE;
CREATE TABLE T06_SIZE(
	C06_SIZE_ID   INT PRIMARY KEY,
	C06_SIZE_NAME VARCHAR(10) NOT NULL,
    -- BIT(1)     --> chỉ nhận giá trị 0,1 --> tối đa 1 giá trị
    -- BIT(5)     --> chỉ nhận giá trị 0,1 --> tối đa 5 giá trị
    -- TINYINT(1) --> chỉ nhật 0 -> 9      --> tối đa 1 ký tự, muốn 0,1 thì phải thêm CHECK
	C06_GENDER    BIT(1) NOT NULL,
	C06_SIZE_DESC TEXT NOT NULL,
    CONSTRAINT CHECK_SIZE_NAME CHECK (C06_SIZE_NAME IN ('S', 'M', 'L', 'XL', 'XXL'))
);

DROP TABLE IF EXISTS T12_ITEM_DETAIL;
CREATE TABLE T12_ITEM_DETAIL(
	C12_ITEM_DETAIL_ID INT PRIMARY KEY,
	C12_ITEM_ID INT NOT NULL,
	C12_SIZE_ID INT NOT NULL,
	C12_COLOR   VARCHAR(50) NOT NULL,
	C12_SALES_PRICE FLOAT,
	C12_AMOUNT INT NOT NULL DEFAULT 0,
    CONSTRAINT UNQ_ITEM_SIZE_COLOR UNIQUE(C12_ITEM_ID, C12_SIZE_ID, C12_COLOR),
    CONSTRAINT CHECK_SALES_PRICE_POSITIVE CHECK (C12_SALES_PRICE >= 0),
    CONSTRAINT CHECK_AMOUNT_POSITIVE CHECK (C12_AMOUNT >= 0),
    CONSTRAINT UNQ_TITLE_DETAIL UNIQUE(C12_ITEM_DETAIL_ID)
);

DROP TABLE IF EXISTS T13_GALLERY;
CREATE TABLE T13_GALLERY(
    -- C13_PATH    TEXT PRIMARY KEY  
    -- PRIMARY KEY yêu cầu KDL TEXT/BLOB ko được vì chưa chỉ định LENGTH cho column
	C13_PATH    VARCHAR(255) PRIMARY KEY,
	C13_ITEM_ID INT NOT NULL
);

-- Sử dụng ALTER TABLE để thêm khóa ngoại
ALTER TABLE T13_GALLERY
ADD CONSTRAINT FK_GALLERY_ITEM FOREIGN KEY (C13_ITEM_ID)
						       REFERENCES T01_ITEM(C01_ITEM_ID);
                      

DROP TABLE IF EXISTS T04_PAYMENT_METHOD;
CREATE TABLE T04_PAYMENT_METHOD(

C04_PMETHOD_ID INT PRIMARY KEY,
C04_PMETHOD_DESC TEXT NOT NULL,
CONSTRAINT UNQ_PAYMENT_METHOD UNIQUE(C04_PMETHOD_ID)
);           
         
DROP TABLE IF EXISTS T11_CUSTOMER;
CREATE TABLE T11_CUSTOMER(

C11_CUSTOMER_ID INT PRIMARY KEY,
C11_CUSTOMER_NAME VARCHAR(100)  NOT NULL,
C11_CUSTOMER_EMAIL VARCHAR(255) NOT NULL,
C11_EMPLOYEE_ADDRESS TEXT NOT NULL,
C11_EMPLOYEE_PHONE VARCHAR(20) NOT NULL,
C11_EMPLOYEE_USERNAME VARCHAR(100) NOT NULL,
C11_EMPLOYEE_PASSWORD VARCHAR(100) NOT NULL,
CONSTRAINT UNQ_CUSTOMER UNIQUE(C11_CUSTOMER_ID)
);

DROP TABLE IF EXISTS T03_ORDER;
CREATE TABLE T03_ORDER(
C03_ORDER_ID INT PRIMARY KEY,
C03_ORDER_TIME DATETIME NOT NULL,
C03_DELIVERY_FEE FLOAT NOT NULL,
C03_DELIVERY_ADDRESS TEXT NOT NULL,
C03_RECEIVER_PHONE VARCHAR(20) NOT NULL,
C03_TOTAL_OF_MONEY FLOAT NOT NULL,
C03_PMETHOD_ID INT NOT NULL,
C03_CUSTOMER_ID INT NOT NULL,

CONSTRAINT FK_PMETHOD_ID FOREIGN KEY(C03_PMETHOD_ID)
		REFERENCES T04_PAYMENT_METHOD(C04_PMETHOD_ID),
CONSTRAINT FK_CUSTOMER_ID FOREIGN KEY(C03_CUSTOMER_ID)
		REFERENCES T11_CUSTOMER(C11_CUSTOMER_ID),
CONSTRAINT UNQ_ORDER UNIQUE(C03_ORDER_ID)
);

DROP TABLE IF EXISTS T08_TITLE;
CREATE TABLE T08_TITLE(
C08_TITLE_ID INT PRIMARY KEY,
C08_TITLE_NAME VARCHAR(255),

CONSTRAINT UNQ_TITLE UNIQUE(C08_TITLE_ID)
);

DROP TABLE IF EXISTS T07_EMPLOYEE;
CREATE TABLE T07_EMPLOYEE(

C07_EMPLOYEE_ID INT PRIMARY KEY,
C07_EMPLOYEE_NAME VARCHAR(255) NOT NULL,
C07_EMPLOYEE_ADDRESS TEXT NOT NULL,
C07_EMPLOYEE_PHONE VARCHAR(20) NOT NULL,
C07_EMPLOYEE_EMAIL VARCHAR(255) NOT NULL,
C07_EMPLOYEE_USERNAME VARCHAR(255) NOT NULL,
C07_EMPLOYEE_PASSWORD VARCHAR(255) NOT NULL,
C07_TITLE_ID INT NOT NULL,

CONSTRAINT FK_TITLE_ID FOREIGN KEY(C07_TITLE_ID)
		REFERENCES T08_TITLE(C08_TITLE_ID),
CONSTRAINT UNQ_EMPLOYEE UNIQUE(C07_EMPLOYEE_ID)
);

DROP TABLE IF EXISTS T14_ORDER_DETAIL;
CREATE TABLE T14_ORDER_DETAIL(

C14_ORDER_ID INT NOT NULL,
C14_ITEM_DETAIL_ID INT NOT NULL,
C14_AMOUNT INT NOT NULL,

PRIMARY KEY (C14_ORDER_ID, C14_ITEM_DETAIL_ID)
);


DROP TABLE IF EXISTS T05_ORDER_STATUS;
CREATE TABLE T05_ORDER_STATUS(

C05_ORDER_STATUS_ID INT PRIMARY KEY,
C05_ORDER_STATUS_DESC TEXT NOT NULL,

CONSTRAINT UNQ_ORDER_STATUS UNIQUE(C05_ORDER_STATUS_ID)


);

DROP TABLE IF EXISTS T15_ORDER_STATUS_DETAIL;
CREATE TABLE T15_ORDER_STATUS_DETAIL(

C15_ORDER_ID INT NOT NULL,
C15_ORDER_STATUS_ID INT NOT NULL,
C15_EMPLOYEE_ID INT NOT NULL ,
C15_LAST_UPDATE DATETIME NOT NULL,

PRIMARY KEY(C15_ORDER_ID,C15_ORDER_STATUS_ID),

CONSTRAINT FK_EMPLOYEE FOREIGN KEY(C15_EMPLOYEE_ID)
		REFERENCES T07_EMPLOYEE(C07_EMPLOYEE_ID)
);


DROP TABLE IF EXISTS T09_ITEM_STATISTIC;
CREATE TABLE T09_ITEM_STATISTIC (
    C09_ITEM_ID INT NOT NULL,
    C09_DATE_FROM DATETIME NOT NULL,
    C09_DATE_UNTIL DATETIME NOT NULL,
    C09_SALES_AMOUNT INT NOT NULL,
    C09_STOCK_AMOUNT INT, 
    C09_REVENUE FLOAT,
    PRIMARY KEY (C09_ITEM_ID, C09_DATE_FROM, C09_DATE_UNTIL),
    FOREIGN KEY (C09_ITEM_ID) REFERENCES T01_ITEM(C01_ITEM_ID) 
);

DROP TABLE IF EXISTS T10_REVENUE;
CREATE TABLE T10_REVENUE (
    C10_RID INT PRIMARY KEY,
    C10_DATE_FROM DATETIME NOT NULL,
    C10_DATE_UNTIL DATETIME NOT NULL,
    C10_TOTAL_OF_MONEY FLOAT
);


-- enable foreign key check
SET FOREIGN_KEY_CHECKS = 1;
