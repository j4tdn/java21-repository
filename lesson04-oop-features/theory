1. Tính chất đóng gói  (Encapsulation)

Khái niệm: 

  - Tính chất đóng gói được thể hiện qua các từ khóa của access modifier(public, private, protected) 

   Sử dụng: attribute(global variable), method 
            type(class, interface, abstract class, enum): public/private
   
  + private: Đóng gói trong phạm vi của class
  
  + public: Sử dụng mọi nơi 
  
  + protected: đóng gói trong phạm vi của package và những class có quan hệ cha/con bên ngoài package
  
  +          : khi một hàm hay một thuộc tính mà mình kh khai báo access modifier thì nó sẽ được đóng gói trong phạm vi của package 
   
   
   
   
2. Tính chất đa hình (polymorphism)

Khái niệm: 
  - Tính chất đa hình có 2 loại: phương thức & đối tượng
  
  + Đa hình trong phương thức:
   Là một phương thức nhưng mà có nhiều phần thực thi, thể hiện khác nhau
    . overloading
    --> 2 hay nhiều phương thức được gọi là overload nếu 
        + Cùng 1 type (class), tên hàm
        + Khác:
          KDL truyền vào của tham số
          Số lượng tham số truyền vào
          
    . overriding  ( chỉ override hàm, không override thuộc tính)
    --> Khi có 1 hàm trong class cha và hàm đó được định nghĩa lại trong class con (liên quan đến tính chất kế thừa) 
    
  Hàm override trong lớp con bắt buộc phải chung phần khai báo với hàm ở lớp cha
  
      void log() { //declaration
         //implementation
      } 
      
      
      
3. Tính chất thừa kế
+ Lớp cha là class
when dùng: Có các thuộc tính chung
--> Con: không bắt buộc override

 
+ Lớp cha là interface     
when dùng: Có các hàm chung chưa biết phần thực thi như nào      

  Trước java 8: Interface chỉ chứa hàm trừu tượng
 --> Con: bắt buộc override hàm trừu tượng từ cha
 
  
  
  [Abstract] Class implements Interface[s]
  [Abstract] Class extends [Abstract] Class
  Interface extends Interface[s]
 
 Abstract class implements Interface hoặc Interface extends Interface
 --> Không bắt buộc phải override abstract method
 
 
 
 Java có hỗ trợ đa thừa kế không, vì sao?
    Đa thừa kế
    --> Class con kế thừa từ nhiều class cha
    vì trong java 1 cái class con khi extend cái class cha thì nó không bặt buộc phải override, 
     cho trường hợp các lớp cha có hàm giống nhau thì khi đó lớp con sẽ không biết gọi cái hàm đó từ lớp cha nào 
    
    
 Phân biết abstract và interface?
 
 
4. Tính chất trừu tượng 

class -> là khái niệm trừu tượng dùng để chỉ tập hợp các dối tượng có chung 
+ thuộc tính 
+ phương thức
Car1, Car2, Car3 --> Car  

Trong coding
- abstract methods trong interface, abstract class
--> tạo ra các abstract method chung cho kiểu dữ liệu cha sau đó con sẽ override
--> Ví dụ: calS, tinhS, tinhDienTich, tinhDT

 

 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 