1. Tính chất đóng gói (encapsulation)
+ Khái niệm:
	Tính chất đóng gói được thể hiện qua các từ khóa của acces modifier( public, private, protected,)
	
	Sử dụng: attribute (global variable), method (function)
	       : type (class, inteface, abstract class, enum )
	       
		+private  : Đóng gói trong phạm vi của class
		+public   : Sử dụng ở mọi nơi
		+         : Đóng gói trong phạm vi của package
		+protected: Đóng gói trong phạm vi của package
					Và những class có quan hệ cha/con bên ngoài package
					(Tính chất thừa kế inheritance)

2. Tính chất đa hình (polymorphism)

-Khái niệm:
	+Tính đa hình có 2 loại: Phương thức và đối tượng
	
	+ Đà hình trong phương thức;
		+Là 1 phương thức nhung mà sẽ có nhiều phần thực thi, thể hiện khác nhau
		 .overloading
		 	--> 2 hay nhiều phương thức được gọi là overload nếu
		 		+Cùng 1 type (class), tên
		 		+Khác:
		 			+KDL trả về
		 			+KDL truyền vào của tham số 
		 			+Số lượng tham số truyền vào
		 .overriding
		 	--> khi có 1 hàm trong class cha, hàm đó được định nghĩa lại trong class con
		 		(Liên quán đến tính chất kế thừa)
		 		Hàm override trong lớp con bắt buocj phải chung phần khai báo với hàm ở lớp cha
		 		void log() { //khai báo declaration
		 		// thực thi: implementation
		 		}
		 		
3. Tính chất thừa kế
 + Lớp cha là class
 	Khi: có các thuộc tính chung
 	--> Con: không bắt buộc override hàm từ cha
 
 +Lớp cha là Interface		
   	Khi: có các hàm chung chưa biết phần thực thi như nào 
   	
   	Trước Java 8: Interface chỉ chứa hàm trừu tượng
   	--> Con: bắt buộc phải override hàm trừu tượng từ hàm cha
		 
	[Abstract] Class extends [Abstract] Class  (kế thừa class dùng extends) ( chỉ dùng extends được 1 class)
	[Abstract] Class implements Interface1, Interface2	  (kế thừa interface1 dùng Implements
	
	Interface extend Interface1, Interface 2 (kế thừa nhều interface)
	
	Abstract class implements Interface hoặc Interface extends Interface
	--> không bắt buộc phải override abstracs method
	
	?? Java có hỗ trợ đa thừa kế không? Vì sao
	-Đa thừa kế:
		+Class con kế thừa từ nhiều class 
			vì không bắt buộc override nên khi kế thừa thì hàm bị trùng ở bố và mẹ sẽ không biết dùng ở hàm của ai
		
	
	
	//Còn tính chất trừu tượng: Lý thuyết
	//Anonymous function (lambda expresstion)
	// Strategy pattern
	
	
	class --> là 1 khái niệm trừu tượng được tạo ra để chỉ 1 tập hợp các đối tượng có chung 1 thuộc tính , và phương thức
			+tt
			pt
			Car1, car2, car3 --> car
	+coding
	 -->abstract method trong interface, abstract class
	--->tạo ra các abstract method chung cho KDL cha, sau đó con sẽ override
	--> VD: calS, tinhS, tinhDientich, tinhDT
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		 